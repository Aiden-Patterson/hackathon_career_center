// Dependencies
// const path = require("path");
const fs = require("fs");
const { match } = require("assert");

// A function to load all of the template cards, and switch the screen to focus on them
function fillTemplateCards() {

  // Getting path to templates and initializing a blank string for the templates
  var template_cards = "";
  
  // Read all files from the templates folder
  fs.readdir(templatePath, function (err, files) {
    
    // If there is an error, log it
    if (err) {
      return console.log("Unable to scan directory: " + err);
    }

    // Adding all files to the string using forEach
    files.forEach(function (file) {

      // Remove the extension to get the title for the file
      fileTitle = file.split(".").slice(0, -1);

      // Create all of the template cards and add their html to a string, with the proper linked file and file title
      template_cards += "<div class = 'template_card' onclick = 'callFillTemplate(" + '"' + file + '"' + ")'> " + fileTitle + "</div>";

    });

    // Set the inner html of the cards container to the string of template cards
    document.getElementById("template_cards_container").innerHTML =
      template_cards;

    // Set the display of the template card container to grid
    document.getElementById("template_cards_container").style.display = "grid";
  });
  
  // Hide link editor if it is open
  document.getElementById("urlpopup").style.display = "none";

}

// Call the fill template function given a specific file, and pass it the parameters in the hidden html that was generated by the selected appointment card
function callFillTemplate(file){
  fillTemplate(file, document.getElementById('name').innerHTML, 
  document.getElementById('time').innerHTML, 
  document.getElementById('yourName').innerHTML, 
  document.getElementById('dateMeet').innerHTML, 
  document.getElementById('location').innerHTML);
}

// A function that will return the starting index of each set of {} in a text
function handleFormat(text) {

  // Initialize the result variable
  var result = [];

  // Loop through each character in the text
  for (index in text) {

    // If that character is an open curly brace it means that 
    if (text[index] === "{") {

      // The index of the start of the substring that will be returned
      let start_index = index;

      // Initialize end index
      let end_index = index;

      // How deeply nested we are in curly brackets
      var nest = 0;

      for (sub_index in text.slice(start_index)) {

        if (text[parseInt(index) + parseInt(sub_index)] === "{") {
          nest ++;
        }

        else if (text[parseInt(index) + parseInt(sub_index)] === "}") {
          nest --;
        }
        
        if (nest === 0) {

          end_index = parseInt(index) + parseInt(sub_index);
          result.push(text.slice(start_index, end_index + 1));
          break;
          
        }

      }

    }
  }

  return result;

}

// Function to fill a template given a file name, and the information to fill it with
function fillTemplate(template_name, name, time, your_name, date, location) {

  // Create an XML HTTP request to get the proper template
  var client = new XMLHttpRequest();

  // Load the required template
  let data_path = templatePath+'/' + template_name;
  client.open("GET", data_path);

  // When the template is loaded
  client.onreadystatechange = function () {

    // Set the directory path to the templates folder
    let data_path = templatePath;

    // Get Template from folder
    var template = client.responseText;

    // Match that text
    let matches = handleFormat(template);

    // For every match
    for (arr_index in matches) {
      let item = matches[arr_index];

      // If it is a link (it will have a colon in the middle)
      if (item.indexOf(":") !== -1) {

        // Split the match into an array representing the link text, and the url
        let match_index = template.indexOf(item);
        let end_index = match_index + item.length - 2;
        let data_to_split = template.substring(match_index + 1, end_index + 1);
        let link_data = data_to_split.split(":");

        // If it only has 2 items
        if (link_data.length == 2){
          
          // Fill in the template with the proper values from the link
          let link_html = "<a href='" + link_data[1] + "'>" + link_data[0] + "</a>";
          template = template.slice(0, match_index) + link_html + template.slice(end_index + 2);

        }
        
      }

    }


    // Fill in user and event data
    template = template
      .replace(/{name}/g, name)
      .replace(/{time}/g, time)
      .replace(/{your_name}/g, your_name)
      .replace(/{date}/g, date)
      .replace(/{location}/g, location);

    // Create the template form 
    page = "<div id='filled-template'>"+
    "<div>"+
    "   <input type='email' name='recipient_email' id='recipient_email' placeholder='Recipient'>"+
    "</div>"+
    "<div id='email_content'>"+
        template +
    "</div>" + 
    "<button class='send_btn' id='send' onclick='sendIt()'>Send</button>" +
    "</div>";

    // Fill template_cards_container and set the display to block
    document.getElementById("template_cards_container").style.display = "block";
    document.getElementById("template_cards_container").innerHTML = page;

  };

  // Send the XML HTTP request
  client.send();

}

// Function to create a new template
function openTemplateCreator() {

  // Set the display to grid
  document.getElementById("template_cards_container").style.display = "grid";

  // HTML for the template creator
  html =
    "<div class = 'left_grid'>" +
    "    <input type = 'text' name = 'template_title' id = 'template_title' placeholder='Title'></input><br>" +
    "    <input type = 'text' name = 'template_header' id = 'template_header' placeholder='Subject'></input><br>" +
    "    <textarea name='template_text' id='template_text' cols='60' rows='20' placeholder='Body'></textarea><br>" +
    "    <button id = 'template_button' onclick='createTemplate()'>Create</button>" +
    "</div>" +
    "<div class='right_grid'>" + 
    "    <table>" +
    "    <tr><th>Value to replace</th><th>What it is replaced with</th></tr>" +
    "    <tr><td>{name}</td><td>Recipient name</td></tr>" +
    "    <tr><td>{time}</td><td>Time (hour:minute)</td></tr>" +
    "    <tr><td>{location}</td><td>Meeting location</td></tr>" +
    "    <tr><td>{date}</td><td>The date of your meeting</td></tr>" +
    "    <tr><td>{your_name}</td><td>Your (mentor) name</td></tr>" +
    "    <tr><td>{[link text]:[link url]}</td><td>Making a link</td></tr>" +
    "</table> <p class='bold'>The signature block is already included</p>" + 
    "</div>";

  // Load the template creator into the page
  document.getElementById("template_cards_container").innerHTML = html;
}

// A function to create a new template
function createTemplate() {

  // Load attributes from the template creator
  title = document.getElementById("template_title").value;
  text = document.getElementById("template_text").value;
  header = document.getElementById("template_header").value;

  // Replace newline characters
  title = title.replaceAll("\n", "");
  header = header.replaceAll("\n", "");
  text = text.replaceAll("\n", "<br/>");

  // Trim newlines at the end of the body to put the signature in the correct location
  while (text.substring(text.length - 5) == "<br/>"){
    text = text.substring(0, text.length - 5);
  }

  text = text + "<br/>";

  // HTML for the new template
  html =
    "<!DOCTYPE html>" +
    "<html>" +
    "    <body>" +
    "<p onclick='checkIfUrl(event)' contenteditable='true' id='template-edit-header'>" +
    header +
    "</p>" +
    "        <p contenteditable='true' onclick='checkIfUrl(event)' id='template-edit-paragraph'>" +
    text +
    "           <br>{your_name},<br>" +
    "           Career Success Mentor<br>" +
    "           BYU-I Career Center | MC 200 <br>" +
    "           208.496.9825  <br>" +
    '           <a href="byui.edu/career/students/job-market-readiness" id="00">byui.edu/career/students/job-market-readiness</a>' +
    "        </p>" +
    "    </body>" +
    "</html>";

  // Add that new template into the templates folder
  let data_path = templatePath+'/' + title + ".html";
  fs.writeFile(data_path, html, (err) => {
    if (err) {
      
      // If there is an error log it
      console.log(err);
    }
    else {

      // If there is no error, celebrate!!
      console.log("File written successfully\n");

      // Empty the fields in the template creator
      document.getElementById("template_title").innerHTML = "";
      document.getElementById("template_header").innerHTML = "";
      document.getElementById("template_text").innerHTML = "";

      // Load the template cards
      fillTemplateCards();
    }
  });
}

// A function to delete a template
function deleteTemplate(template_name) {

  // Try to run this code
  try {

    // Delete the template
    let data_path = templatePath+'/' + template_name;
    fs.unlinkSync(data_path);

    // Load the window to delete templates again
    fillDeleteTemplateCards();

    // Log your success
    console.log("File is deleted.");
  } catch (error) {

    // If there is an error, report it
    console.log(error);
  }
}

// Function to load the window for template deletion
function fillDeleteTemplateCards() {

  // Set the directory path to the templates folder
  let data_path = templatePath;
  var template_cards = "";

  // Load the template from the file
  fs.readdir(data_path, function (err, files) {

    // Handling error
    if (err) {
      return console.log("Unable to scan directory: " + err);
    }

    // List all files using forEach
    files.forEach(function (file) {

      // Set the remove .html from the filename
      fileTitle = file.split(".").slice(0, -1);

      // Add the html for each template, with the class delete_template
      template_cards +=
        "<div class = 'template_card delete_template' onclick='deleteTemplate(" +
        '"' +
        file +
        '"' +
        ")'>Delete " +
        fileTitle +
        "</div>";

    });

    // Set the card container to the list of template cards, and set its display to grid
    document.getElementById("template_cards_container").innerHTML = template_cards;
    document.getElementById("template_cards_container").style.display = "grid";
  });

  // Hide link editor if it is open
  document.getElementById("urlpopup").style.display = "none";

}

